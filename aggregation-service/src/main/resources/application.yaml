server:
  port: 8081
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    preferIpAddress: true
writer-class-name: ConsoleWriter

spring:
  application:
    name: @project.artifactId@
    version: @project.version@
  boot:
    admin:
      client:
        enabled: false  # If you want Spring Boot Admin to manage services only through Eureka and not via direct registration, you can ensure that direct registration is disabled.
        url: "http://localhost:8085"
        instance:
#          service-base-url: "http://${spring.application.name}:${server.port}"
#          service-base-url: "http://aggregation-service:8080"
          service-base-url: "http://localhost:${server.port}"
#          metadata:
#            user:
#              name: ${spring.security.user.name}
#              password: ${spring.security.user.password}
#        username: admin
#        password: admin
#  security:
#    user:
#      name: client
#      password: client
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost} # container name
      port: 6379
management:
  tracing:
    sampling:
      probability: 1.0 # only for testing purpose, switch back to 0.1 for production code
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    loggers:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
springdoc:
  version: '@springdoc.version@'
  api-docs:
    version: openapi_3_1
  swagger-ui:
    use-root-path: true